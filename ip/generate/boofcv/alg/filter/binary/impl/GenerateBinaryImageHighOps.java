/*
 * Copyright 2011 Peter Abeles
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package boofcv.alg.filter.binary.impl;

import boofcv.misc.AutoTypeImage;
import boofcv.misc.CodeGeneratorBase;
import boofcv.misc.CodeGeneratorUtil;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;


/**
 * @author Peter Abeles
 */
public class GenerateBinaryImageHighOps extends CodeGeneratorBase {
	String className = "BinaryImageHighOps";

	PrintStream out;

	public GenerateBinaryImageHighOps() throws FileNotFoundException {
		out = new PrintStream(new FileOutputStream(className + ".java"));
	}

	@Override
	public void generate() throws FileNotFoundException {
		printPreamble();

		printAll(AutoTypeImage.F32);
		printAll(AutoTypeImage.F64);
		printAll(AutoTypeImage.U8);
		printAll(AutoTypeImage.S16);
		printAll(AutoTypeImage.U16);
		printAll(AutoTypeImage.S32);

		out.print("\n" +
				"}\n");
	}

	private void printPreamble() {
		out.print(CodeGeneratorUtil.copyright);
		out.print("package gecv.alg.filter.binary;\n" +
				"\n" +
				"import gecv.alg.InputSanityCheck;\n" +
				"import gecv.alg.filter.binary.impl.ImplBinaryBlobLabeling;\n" +
				"import gecv.struct.GrowingArrayInt;\n" +
				"import gecv.misc.BoofMiscOps;\n" +
				"import gecv.struct.image.*;\n" +
				"\n" +
				"/**\n" +
				" * <p>\n" +
				" * Operations on binary images that make calls to lower level binary image operations.\n" +
				" * </p>\n" +
				" *\n" +
				" * <p>\n" +
				" * WARNING: Do not modify.  Automatically generated by {@link gecv.alg.filter.binary.impl.GenerateBinaryImageHighOps}.\n" +
				" * </p>\n" +
				" *\n" +
				" * @author Peter Abeles\n" +
				" */\n" +
				"public class "+className+" {\n\n");

	}

	public void printAll( AutoTypeImage imageIn ) {
		printHysteresisLabel(imageIn,4);
		printHysteresisLabel(imageIn,8);
	}

	public void printHysteresisLabel( AutoTypeImage imageIn , int rule ) {
		out.print("\t/**\n" +
				"\t * <p>\n" +
				"\t * Hysteresis thresholding and blob labeling with a connect-"+rule+" rule. The input image is thresholded and the resulting\n" +
				"\t * blobs are labeled.\n" +
				"\t * </p>\n" +
				"\t *\n" +
				"\t * <p>\n" +
				"\t * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is\n" +
				"\t * then a less stringent threshold is used for all the connected pixels. The threshold direction determines\n" +
				"\t * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold\n" +
				"\t * is more stringent and the upper less. The opposite is true for when being thresholded up.\n" +
				"\t * </p>\n" +
				"\t *\n" +
				"\t * @param input Input intensity image. Not modified.\n" +
				"\t * @param output Output labeled binary image. Modified.\n" +
				"\t * @param lowerThreshold Lower threshold.\n" +
				"\t * @param upperThreshold Upper threshold.\n" +
				"\t * @param down If it is being thresholded down or up.\n" +
				"\t * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.\n" +
				"\t * @return Number of blobs found.\n" +
				"\t */\n" +
				"\tpublic static int hysteresisLabel"+rule+"( "+imageIn.getImageName()+" input , ImageSInt32 output ,\n" +
				"\t\t\t\t\t\t\t\t\t\t"+imageIn.getSumType()+" lowerThreshold , "+imageIn.getSumType()+" upperThreshold , boolean down ,\n" +
				"\t\t\t\t\t\t\t\t\t\tImageUInt8 work )\n" +
				"\t{\n" +
				"\t\toutput = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);\n" +
				"\t\twork = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);\n" +
				"\n" +
				"\t\tint relabel[];\n" +
				"\n" +
				"\t\tif( down ) {\n" +
				"\t\t\tThresholdImageOps.threshold(input,work,upperThreshold,true);\n" +
				"\t\t\tint numBlobs = BinaryImageOps.labelBlobs"+rule+"(work,output);\n" +
				"\n" +
				"\t\t\trelabel = new int[numBlobs+1];\n" +
				"\t\t\tThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);\n" +
				"\t\t\tImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);\n" +
				"\t\t\tBinaryImageOps.relabel(output,relabel);\n" +
				"\t\t} else {\n" +
				"\t\t\tThresholdImageOps.threshold(input,work,lowerThreshold,false);\n" +
				"\t\t\tint numBlobs = BinaryImageOps.labelBlobs"+rule+"(work,output);\n" +
				"\n" +
				"\t\t\trelabel = new int[numBlobs+1];\n" +
				"\t\t\tThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);\n" +
				"\t\t\tBinaryImageOps.relabel(output,relabel);\n" +
				"\t\t}\n" +
				"\n" +
				"\t\treturn BoofMiscOps.countNotZero(relabel,relabel.length);\n" +
				"\t}\n\n");
	}

	public static void main( String args[] ) throws FileNotFoundException {
		GenerateBinaryImageHighOps app = new GenerateBinaryImageHighOps();
		app.generate();
	}
}
