/*
 * Copyright 2011 Peter Abeles
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package gecv.alg.distort.impl;

import gecv.alg.InputSanityCheck;
import gecv.alg.distort.ImageDistort;
import gecv.alg.interpolate.InterpolatePixel;
import gecv.struct.distort.PixelDistort;
import gecv.struct.image.ImageInt16;


/**
 * <p>Implementation of {@link gecv.alg.distort.ImageDistort}.</p>
 *
 * <p>
 * DO NOT MODIFY: Generated by {@link GeneratorImageDistort}.
 * </p>
 *
 * @author Peter Abeles
 */
@SuppressWarnings({"UnnecessaryLocalVariable"})
public class ImageDistort_I16 <T extends ImageInt16> implements ImageDistort<T> {

	// transform from dst to src image
	private PixelDistort dstToSrc;
	// sub pixel interpolation
	private InterpolatePixel<T> interp;

	public ImageDistort_I16(PixelDistort dstToSrc, InterpolatePixel<T> interp) {
		this.dstToSrc = dstToSrc;
		this.interp = interp;
	}

	@Override
	public void apply( T srcImg , T dstImg ) {
		InputSanityCheck.checkSameShape(srcImg,dstImg);

		interp.setImage(srcImg);

		final int width = srcImg.getWidth();
		final int height = srcImg.getHeight();

		final float widthF = width;
		final float heightF = height;

		for( int y = 0; y < height; y++ ) {
			int indexDst = dstImg.startIndex + dstImg.stride*y;
			for( int x = 0; x < width; x++ , indexDst++ ) {
				dstToSrc.distort(x,y);

				final float sx = dstToSrc.distX;
				final float sy = dstToSrc.distY;

				if( sx < 0f || sx >= widthF || sy < 0f || sy >= heightF ) {
					continue;
				}

				dstImg.data[indexDst] = (short)interp.get_unsafe(sx,sy);
			}
		}
	}

	@Override
	public void apply( T srcImg , T dstImg , Number value ) {
		InputSanityCheck.checkSameShape(srcImg,dstImg);

		interp.setImage(srcImg);

		int valueF = value.intValue();

		final int width = srcImg.getWidth();
		final int height = srcImg.getHeight();

		final float widthF = width;
		final float heightF = height;

		for( int y = 0; y < height; y++ ) {
			int indexDst = dstImg.startIndex + dstImg.stride*y;
			for( int x = 0; x < width; x++ , indexDst++ ) {
				dstToSrc.distort(x,y);

				final float sx = dstToSrc.distX;
				final float sy = dstToSrc.distY;

				if( sx < 0f || sx >= widthF || sy < 0f || sy >= heightF ) {
					dstImg.data[indexDst] = (short)valueF;
					continue;
				}

				dstImg.data[indexDst] = (short)interp.get_unsafe(sx,sy);
			}
		}
	}

}
