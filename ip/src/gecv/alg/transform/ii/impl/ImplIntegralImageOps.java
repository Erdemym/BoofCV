/*
 * Copyright 2011 Peter Abeles
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package gecv.alg.transform.ii.impl;

import gecv.struct.image.ImageFloat32;
import gecv.struct.image.ImageSInt32;
import gecv.struct.image.ImageUInt8;


/**
 * <p>
 * Compute the integral image for different types of input images.
 * </p>
 * 
 * <p>
 * DO NOT MODIFY: Generated by {@link GenerateImplIntegralImageOps}.
 * </p>
 * 
 * @author Peter Abeles
 */
public class ImplIntegralImageOps {

	public static void process( final ImageFloat32 input , final ImageFloat32 transformed )
	{
		int indexSrc = input.startIndex;
		int indexDst = transformed.startIndex;
		int end = indexSrc + input.width;

		float total = 0;
		for( ; indexSrc < end; indexSrc++ ) {
			transformed.data[indexDst++] = total += input.data[indexSrc];
		}

		for( int y = 1; y < input.height; y++ ) {
			indexSrc = input.startIndex + input.stride*y;
			indexDst = transformed.startIndex + transformed.stride*y;
			int indexPrev = indexDst - transformed.stride;

			end = indexSrc + input.width;

			total = 0;
			for( ; indexSrc < end; indexSrc++ ) {
				total +=  input.data[indexSrc];
				transformed.data[indexDst++] = transformed.data[indexPrev++] + total;
			}
		}
	}

	public static void process( final ImageUInt8 input , final ImageSInt32 transformed )
	{
		int indexSrc = input.startIndex;
		int indexDst = transformed.startIndex;
		int end = indexSrc + input.width;

		int total = 0;
		for( ; indexSrc < end; indexSrc++ ) {
			transformed.data[indexDst++] = total += input.data[indexSrc]& 0xFF;
		}

		for( int y = 1; y < input.height; y++ ) {
			indexSrc = input.startIndex + input.stride*y;
			indexDst = transformed.startIndex + transformed.stride*y;
			int indexPrev = indexDst - transformed.stride;

			end = indexSrc + input.width;

			total = 0;
			for( ; indexSrc < end; indexSrc++ ) {
				total +=  input.data[indexSrc]& 0xFF;
				transformed.data[indexDst++] = transformed.data[indexPrev++] + total;
			}
		}
	}


}
