/*
 * Copyright 2011 Peter Abeles
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package gecv.alg.filter.convolve.noborder;

import gecv.misc.CodeGeneratorUtil;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

/**
 * @author Peter Abeles
 */
public class GenerateConvolvedUnrolled {

	final static int numUnrolled = 5;

	PrintStream out;
	String className;
	String typeKernel;
	String typeInput;
	String typeOutput;
	String dataKernel;
	String dataInput;
	String dataOutput;
	String bitWise;
	String sumType;
	boolean hasDivisor;

	public void createAll() throws FileNotFoundException {
		createF32();
		createU8_I8();
		createU8_I16();
		createS16_I16();
		createS16_I16_div();
	}

	public void createF32() throws FileNotFoundException {
		className = "ConvolveImageUnrolled_F32_F32";
		typeKernel = "F32";
		typeInput = "ImageFloat32";
		typeOutput = "ImageFloat32";
		dataKernel = "float";
		dataInput = "float";
		dataOutput = "float";
		sumType = "float";
		bitWise = "";
		hasDivisor = false;

		createFile();
	}

	public void createU8_I8() throws FileNotFoundException {
		className = "ConvolveImageUnrolled_I8_I8_Div";
		typeKernel = "I32";
		typeInput = "ImageUInt8";
		typeOutput = "ImageInt8";
		dataKernel = "int";
		dataInput = "byte";
		dataOutput = "byte";
		sumType = "int";
		bitWise = " & 0xFF";
		hasDivisor = true;

		createFile();
	}

	public void createU8_I16() throws FileNotFoundException {
		className = "ConvolveImageUnrolled_I8_I16";
		typeKernel = "I32";
		typeInput = "ImageUInt8";
		typeOutput = "ImageInt16";
		dataKernel = "int";
		dataInput = "byte";
		dataOutput = "short";
		sumType = "int";
		bitWise = " & 0xFF";
		hasDivisor = false;

		createFile();
	}

	public void createS16_I16() throws FileNotFoundException {
		className = "ConvolveImageUnrolled_I16_I16";
		typeKernel = "I32";
		typeInput = "ImageSInt16";
		typeOutput = "ImageInt16";
		dataKernel = "int";
		dataInput = "short";
		dataOutput = "short";
		sumType = "int";
		bitWise = "";
		hasDivisor = false;

		createFile();
	}

	public void createS16_I16_div() throws FileNotFoundException {
		className = "ConvolveImageUnrolled_I16_I16_Div";
		typeKernel = "I32";
		typeInput = "ImageSInt16";
		typeOutput = "ImageInt16";
		dataKernel = "int";
		dataInput = "short";
		dataOutput = "short";
		sumType = "int";
		bitWise = "";
		hasDivisor = true;

		createFile();
	}

	public void createFile() throws FileNotFoundException {
		out = new PrintStream(new FileOutputStream(className + ".java"));

		printPreamble();
		createMaster("horizontal",1,hasDivisor);
		createMaster("vertical",1,hasDivisor);
		createMaster("convolve",2,hasDivisor);

		for (int i = 0; i < numUnrolled; i++) {
			addHorizontal(3 + i * 2,hasDivisor);
		}
		for (int i = 0; i < numUnrolled; i++) {
			addVertical(3 + i * 2, hasDivisor);
		}
		for (int i = 0; i < numUnrolled; i++) {
			if( hasDivisor )
				addConvolveDiv(3 + i * 2 );
			else
				addConvolve(3 + i * 2 );
		}

		out.println("}");
	}

	public void printPreamble() {
		out.print(CodeGeneratorUtil.copyright);
		out.print("package gecv.alg.filter.convolve.noborder;\n");
		out.println();
		out.print("import gecv.struct.convolve.Kernel1D_" + typeKernel + ";\n");
		out.print("import gecv.struct.convolve.Kernel2D_" + typeKernel + ";\n");
		out.print("import gecv.struct.image." + typeInput + ";\n");
		if (typeInput.compareTo(typeOutput) != 0)
			out.print("import gecv.struct.image." + typeOutput + ";\n");
		out.print("\n" +
				"/**\n" +
				" * <p>\n" +
				" * Unrolls the convolution kernel to reduce array accessing and save often used variables to the stack.\n" +
				" * </p>\n" +
				" *\n" +
				" * <p>\n" +
				" * Unrolling the image being convolved resulting in an additional 10% performance boost on a Core i7 processor,\n" +
				" * see commented out code below.  Due to the added complexity it was decided that this performance boost was\n" +
				" * not worth it.  By comparison, unrolling the kernel causes a performance boost between 2 and 3 times.\n" +
				" * </p>\n" +
				" * \n" +
				" * <p>\n" +
				" * DO NOT MODIFY.  This class was automatically generated by {@link GenerateConvolvedUnrolled}.\n" +
				" * </p>\n" +
				" *\n" +
				" * @author Peter Abeles\n" +
				" */\n" +
				"public class " + className + " {\n");
	}

	public void createMaster(String opName, int kernelDOF , boolean hasDivisor ) {
		String kernel = "Kernel"+kernelDOF+"D_"+typeKernel;

		out.print("\tpublic static boolean " + opName + "( " + kernel + " kernel ,\n" +
				"\t\t\t\t\t\t\t\t   " + typeInput + " image, " + typeOutput + " dest");

		String includeBorderStr;

		if( kernelDOF == 1 ) {
			includeBorderStr= ",includeBorder";
			out.println(",");
			if( hasDivisor ) {
				out.print("\t\t\t\t\t\t\t\t   int divisor, boolean includeBorder) {\n");
			} else {
				out.print("\t\t\t\t\t\t\t\t   boolean includeBorder) {\n");
			}
		} else {
			includeBorderStr="";
			if( hasDivisor ) {
				out.print(", int divisor ) {\n");
			} else {
				out.print(") {\n");
			}
		}

		out.print("\t\tswitch( kernel.width ) {\n");
		for (int i = 0; i < numUnrolled; i++) {
			int num = 3 + i * 2;
			out.print("\t\t\tcase " + num + ":\n");
			if( hasDivisor )
				out.print("\t\t\t\t" + opName + num + "(kernel,image,dest,divisor"+includeBorderStr+");\n");
			else
				out.print("\t\t\t\t" + opName + num + "(kernel,image,dest"+includeBorderStr+");\n");
			out.print("\t\t\t\tbreak;\n" +
					"\n");
		}
		out.print("\t\t\tdefault:\n" +
				"\t\t\t\treturn false;\n" +
				"\t\t}\n" +
				"\t\treturn true;\n" +
				"\t}\n\n");
	}

	public void addHorizontal(int num, boolean hasDivisor ) {
		String typeCast = generateTypeCast();

		out.print("\tpublic static void horizontal" + num + "( Kernel1D_" + typeKernel + " kernel ,\n" +
				"\t\t\t\t\t\t\t\t\t" + typeInput + " image, " + typeOutput + " dest,\n");

		if( hasDivisor ) {
			out.print("\t\t\t\t\t\t\t\t\tint divisor, boolean includeBorder) {\n");
		} else {
			out.print("\t\t\t\t\t\t\t\t\tboolean includeBorder) {\n");
		}
		out.print("\t\tfinal " + dataInput + "[] dataSrc = image.data;\n" +
				"\t\tfinal " + dataOutput + "[] dataDst = dest.data;\n" +
				"\n");
		for (int i = 0; i < num; i++) {
			out.printf("\t\tfinal " + dataKernel + " k%d = kernel.data[%d];\n", (i + 1), i);
		}
		out.print("\n" +
				"\t\tfinal int radius = kernel.getRadius();\n" +
				"\n" +
				"\t\tfinal int yBorder = includeBorder ? 0 : radius;\n" +
				"\n" +
				"\t\tfinal int width = image.getWidth();\n" +
				"\t\tfinal int height = image.getHeight()-yBorder;\n" +
				"\n" +
				"\t\tfor( int i = yBorder; i < height; i++ ) {\n" +
				"\t\t\tint indexDst = dest.startIndex + i*dest.stride+radius;\n" +
				"\t\t\tint j = image.startIndex + i*image.stride - radius;\n" +
				"\t\t\tfinal int jEnd = j+width-radius;\n" +
				"\n" +
				"\t\t\tfor( j += radius; j < jEnd; j++ ) {\n" +
				"\t\t\t\tint indexSrc = j;\n" +
				"\t\t\t\t" + sumType + " total = (dataSrc[indexSrc++]" + bitWise + ")*k1;\n");
		for (int i = 1; i < num - 1; i++) {
			out.printf("\t\t\t\ttotal += (dataSrc[indexSrc++]" + bitWise + ")*k%d;\n", (i + 1));
		}
		out.printf("\t\t\t\ttotal += (dataSrc[indexSrc]" + bitWise + ")*k%d;\n", num);
		out.printf("\n");
		if( hasDivisor ) {
			out.print("\t\t\t\tdataDst[indexDst++] = " + typeCast + "(total/divisor);\n");
		} else {
			out.print("\t\t\t\tdataDst[indexDst++] = " + typeCast + "total;\n");
		}

		out.print("\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public void addVertical(int num, boolean hasDivisor) {
		String typeCast = generateTypeCast();

		out.print("\tpublic static void vertical" + num + "( Kernel1D_" + typeKernel + " kernel,\n" +
				"\t\t\t\t\t\t\t\t " + typeInput + " image, " + typeOutput + " dest,\n");
		if( hasDivisor )
			out.print("\t\t\t\t\t\t\t\t int divisor , boolean includeBorder)\n");
		else
			out.print("\t\t\t\t\t\t\t\t boolean includeBorder)\n");
		out.print("\t{\n" +
				"\t\tfinal " + dataInput + "[] dataSrc = image.data;\n" +
				"\t\tfinal " + dataOutput + "[] dataDst = dest.data;\n" +
				"\n");
		for (int i = 0; i < num; i++) {
			out.printf("\t\tfinal " + dataKernel + " k%d = kernel.data[%d];\n", (i + 1), i);
		}
		out.print("\n" +
				"\t\tfinal int radius = kernel.getRadius();\n" +
				"\n" +
				"\t\tfinal int imgWidth = dest.getWidth();\n" +
				"\t\tfinal int imgHeight = dest.getHeight();\n" +
				"\n" +
				"\t\tfinal int yEnd = imgHeight-radius;\n" +
				"\n" +
				"\t\tfinal int xBorder = includeBorder ? 0 : radius;\n" +
				"\n" +
				"\t\tfor( int y = radius; y < yEnd; y++ ) {\n" +
				"\t\t\tint indexDst = dest.startIndex+y*dest.stride+xBorder;\n" +
				"\t\t\tint i = image.startIndex + (y-radius)*image.stride;\n" +
				"\t\t\tfinal int iEnd = i+imgWidth-xBorder;\n" +
				"\n" +
				"\t\t\tfor( i += xBorder; i < iEnd; i++ ) {\n" +
				"\t\t\t\tint indexSrc = i;\n" +
				"\n" +
				"\t\t\t\t" + sumType + " total = (dataSrc[indexSrc]"+bitWise+") * k1;\n");
		for (int i = 1; i < num; i++) {
			out.printf("\t\t\t\tindexSrc += image.stride;\n");
			out.printf("\t\t\t\ttotal += (dataSrc[indexSrc]" + bitWise + ")*k%d;\n", (i + 1));
		}
		out.print("\n");
		if( hasDivisor )
			out.print("\t\t\t\tdataDst[indexDst++] = " + typeCast + "(total/divisor);\n");
		else
			out.print("\t\t\t\tdataDst[indexDst++] = " + typeCast + "total;\n");
		out.print("\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public void addConvolve(int num ) {
		String typeCast = generateTypeCast();

		out.print("\tpublic static void convolve" + num + "( Kernel2D_" + typeKernel + " kernel, " + typeInput + " src, " + typeOutput + " dest)\n");

		out.print("\t{\n" +
				"\t\tfinal " + dataInput + "[] dataSrc = src.data;\n" +
				"\t\tfinal " + dataOutput + "[] dataDst = dest.data;\n" +
				"\n");
		out.print("\t\tfinal int width = src.getWidth();\n" +
				"\t\tfinal int height = src.getHeight();\n" +
				"\n" +
				"\t\tfinal int kernelRadius = kernel.getRadius();\n" +
				"\n" +
				"\t\tfor( int y = kernelRadius; y < height-kernelRadius; y++ ) {\n" +
				"\n" +
				"\t\t\t// first time through the value needs to be set\n");
		for( int i = 0; i < num; i++ ) {
			out.print("\t\t\t"+sumType+" k"+(i+1)+" = kernel.data["+i+"];\n");
		}
		out.print("\n" +
				"\t\t\tint indexDst = dest.startIndex + y*dest.stride+kernelRadius;\n" +
				"\t\t\tint indexSrcRow = src.startIndex+(y-kernelRadius)*src.stride-kernelRadius;\n" +
				"\t\t\tfor( int x = kernelRadius; x < width-kernelRadius; x++ ) {\n" +
				"\t\t\t\tint indexSrc = indexSrcRow + x;\n" +
				"\n" +
				"\t\t\t\t"+sumType+" total = 0;\n");
		for( int i = 0; i < num-1; i++ ) {
			out.print("\t\t\t\ttotal += (dataSrc[indexSrc++] "+bitWise+")* k"+(i+1)+";\n");
		}
		out.print("\t\t\t\ttotal += (dataSrc[indexSrc] "+bitWise+")* k"+num+";\n");
		out.print("\n" +
				"\t\t\t\tdataDst[indexDst++] = "+typeCast+"total;\n" +
				"\t\t\t}\n" +
				"\n" +
				"\t\t\t// rest of the convolution rows are an addition\n" +
				"\t\t\tfor( int i = 1; i < "+num+"; i++ ) {\n" +
				"\t\t\t\tindexDst = dest.startIndex + y*dest.stride+kernelRadius;\n" +
				"\t\t\t\tindexSrcRow = src.startIndex+(y+i-kernelRadius)*src.stride-kernelRadius;\n" +
				"\t\t\t\t\n");
		for( int i = 0; i < num; i++ ) {
			out.print("\t\t\t\tk"+(i+1)+" = kernel.data[i*"+num+" + "+i+"];\n");
		}
		out.print("\n" +
				"\t\t\t\tfor( int x = kernelRadius; x < width-kernelRadius; x++ ) {\n" +
				"\t\t\t\t\tint indexSrc = indexSrcRow+x;\n" +
				"\n" +
				"\t\t\t\t\t"+sumType+" total = 0;\n");
		for( int i = 0; i < num-1; i++ ) {
			out.print("\t\t\t\t\ttotal += (dataSrc[indexSrc++] "+bitWise+")* k"+(i+1)+";\n");
		}
		out.print("\t\t\t\t\ttotal += (dataSrc[indexSrc] "+bitWise+")* k"+(num)+";\n");
		out.print("\n" +
				"\t\t\t\t\tdataDst[indexDst++] += "+typeCast+"total;\n" +
				"\t\t\t\t}\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public void addConvolveDiv(int num ) {
		String typeCast = generateTypeCast();

		out.print("\tpublic static void convolve" + num + "( Kernel2D_" + typeKernel + " kernel, " + typeInput + " src, " + typeOutput + " dest , int divisor )\n");

		out.print("\t{\n" +
				"\t\tfinal " + dataInput + "[] dataSrc = src.data;\n" +
				"\t\tfinal " + dataOutput + "[] dataDst = dest.data;\n" +
				"\n");
		out.print("\t\tfinal int width = src.getWidth();\n" +
				"\t\tfinal int height = src.getHeight();\n" +
				"\n" +
				"\t\tfinal int kernelRadius = kernel.getRadius();\n");
		out.print("\t\tfinal "+sumType+" totalRow[] = new int[ width ];\n");
		out.print("\n" +
				"\t\tfor( int y = kernelRadius; y < height-kernelRadius; y++ ) {\n" +
				"\n" +
				"\t\t\t// first time through the value needs to be set\n");
		for( int i = 0; i < num; i++ ) {
			out.print("\t\t\t"+sumType+" k"+(i+1)+" = kernel.data["+i+"];\n");
		}
		out.print("\n" +
				"\t\t\tint indexSrcRow = src.startIndex+(y-kernelRadius)*src.stride-kernelRadius;\n" +
				"\t\t\tfor( int x = kernelRadius; x < width-kernelRadius; x++ ) {\n" +
				"\t\t\t\tint indexSrc = indexSrcRow + x;\n" +
				"\n" +
				"\t\t\t\t"+sumType+" total = 0;\n");
		for( int i = 0; i < num-1; i++ ) {
			out.print("\t\t\t\ttotal += (dataSrc[indexSrc++] "+bitWise+")* k"+(i+1)+";\n");
		}
		out.print("\t\t\t\ttotal += (dataSrc[indexSrc] "+bitWise+")* k"+num+";\n");
		out.print("\n" +
				"\t\t\t\ttotalRow[x] = total;\n" +
				"\t\t\t}\n" +
				"\n" +
				"\t\t\t// rest of the convolution rows are an addition\n" +
				"\t\t\tfor( int i = 1; i < "+num+"; i++ ) {\n" +
				"\t\t\t\tindexSrcRow = src.startIndex+(y+i-kernelRadius)*src.stride-kernelRadius;\n" +
				"\t\t\t\t\n");
		for( int i = 0; i < num; i++ ) {
			out.print("\t\t\t\tk"+(i+1)+" = kernel.data[i*"+num+" + "+i+"];\n");
		}
		out.print("\n" +
				"\t\t\t\tfor( int x = kernelRadius; x < width-kernelRadius; x++ ) {\n" +
				"\t\t\t\t\tint indexSrc = indexSrcRow+x;\n" +
				"\n" +
				"\t\t\t\t\t"+sumType+" total = 0;\n");
		for( int i = 0; i < num-1; i++ ) {
			out.print("\t\t\t\t\ttotal += (dataSrc[indexSrc++] "+bitWise+")* k"+(i+1)+";\n");
		}
		out.print("\t\t\t\t\ttotal += (dataSrc[indexSrc] "+bitWise+")* k"+(num)+";\n");
		out.print("\n" +
				"\t\t\t\t\ttotalRow[x] += total;\n" +
				"\t\t\t\t}\n" +
				"\t\t\t}\n" +
				"\t\t\tint indexDst = dest.startIndex + y*dest.stride+kernelRadius;\n" +
				"\t\t\tfor( int x = kernelRadius; x < width-kernelRadius; x++ ) {\n" +
				"\t\t\t\tdataDst[indexDst++] = "+typeCast+"(totalRow[x] / divisor);\n" +
				"\t\t\t}\n"+
				"\t\t}\n" +
				"\t}\n\n");
	}

	private String generateTypeCast() {
		return sumType.compareTo(dataOutput) == 0 ? "" : "( " + dataOutput + " )";
	}

	public static void main(String args[]) throws FileNotFoundException {
		GenerateConvolvedUnrolled a = new GenerateConvolvedUnrolled();

		a.createAll();
	}
}
