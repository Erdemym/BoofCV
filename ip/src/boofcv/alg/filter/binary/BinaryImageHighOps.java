/*
 * Copyright 2011 Peter Abeles
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package boofcv.alg.filter.binary;

import boofcv.alg.InputSanityCheck;
import boofcv.alg.filter.binary.impl.ImplBinaryBlobLabeling;
import boofcv.misc.BoofMiscOps;
import boofcv.struct.image.*;

/**
 * <p>
 * Operations on binary images that make calls to lower level binary image operations.
 * </p>
 *
 * <p>
 * WARNING: Do not modify.  Automatically generated by {@link boofcv.alg.filter.binary.impl.GenerateBinaryImageHighOps}.
 * </p>
 *
 * @author Peter Abeles
 */
public class BinaryImageHighOps {

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageFloat32 input , ImageSInt32 output ,
										float lowerThreshold , float upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageFloat32 input , ImageSInt32 output ,
										float lowerThreshold , float upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageFloat64 input , ImageSInt32 output ,
										double lowerThreshold , double upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageFloat64 input , ImageSInt32 output ,
										double lowerThreshold , double upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageUInt8 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageUInt8 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageSInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageSInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageUInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageUInt16 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-4 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel4( ImageSInt32 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs4(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}

	/**
	 * <p>
	 * Hysteresis thresholding and blob labeling with a connect-8 rule. The input image is thresholded and the resulting
	 * blobs are labeled.
	 * </p>
	 *
	 * <p>
	 * Hysteresis thresholding works by first detecting if a pixel is within a more stringent threshold.  If it is
	 * then a less stringent threshold is used for all the connected pixels. The threshold direction determines
	 * if the lower or upper threshold is more or less stringent.  When thresholding down the the lower threshold
	 * is more stringent and the upper less. The opposite is true for when being thresholded up.
	 * </p>
	 *
	 * @param input Input intensity image. Not modified.
	 * @param output Output labeled binary image. Modified.
	 * @param lowerThreshold Lower threshold.
	 * @param upperThreshold Upper threshold.
	 * @param down If it is being thresholded down or up.
	 * @param work Work image which stores intermediate results and is the same size as the input image.  If null one will be declared internally.
	 * @return Number of blobs found.
	 */
	public static int hysteresisLabel8( ImageSInt32 input , ImageSInt32 output ,
										int lowerThreshold , int upperThreshold , boolean down ,
										ImageUInt8 work )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageSInt32.class);
		work = InputSanityCheck.checkDeclare(input,work,ImageUInt8.class);

		int relabel[];

		if( down ) {
			ThresholdImageOps.threshold(input,work,upperThreshold,true);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,lowerThreshold,true);
			ImplBinaryBlobLabeling.minimizeBlobID(relabel,numBlobs);
			BinaryImageOps.relabel(output,relabel);
		} else {
			ThresholdImageOps.threshold(input,work,lowerThreshold,false);
			int numBlobs = BinaryImageOps.labelBlobs8(work,output);

			relabel = new int[numBlobs+1];
			ThresholdImageOps.thresholdBlobs(input,output,relabel,numBlobs,upperThreshold,false);
			BinaryImageOps.relabel(output,relabel);
		}

		return BoofMiscOps.countNotZero(relabel,relabel.length);
	}


}
