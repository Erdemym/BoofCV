/*
 * Copyright (c) 2011, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://www.boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.distort.impl;

import boofcv.misc.AutoTypeImage;
import boofcv.misc.CodeGeneratorBase;

import java.io.FileNotFoundException;


/**
 * @author Peter Abeles
 */
public class GeneratorImplImageDistort extends CodeGeneratorBase {
	String className;

	AutoTypeImage image;

	@Override
	public void generate() throws FileNotFoundException {
		createType(AutoTypeImage.F32);
		createType(AutoTypeImage.I8);
		createType(AutoTypeImage.I16);
		createType(AutoTypeImage.S32);
	}

	private void createType( AutoTypeImage type ) throws FileNotFoundException {
		className = "ImplImageDistort_"+type.name();
		image = type;

		createFile();
	}

	private void createFile() throws FileNotFoundException {
		printPreamble();
		printFunction();
		out.println("}");
	}

	private void printPreamble() throws FileNotFoundException {

		String imageName = image.getImageName();
		String borderType = image.isInteger() ? "ImageBorder_I32" : "ImageBorder_F32";
		String borderImageType = image.isInteger() ? "ImageInteger" : imageName;

		setOutputFile(className);
		out.print("import boofcv.alg.InputSanityCheck;\n" +
				"import boofcv.alg.interpolate.InterpolatePixel;\n" +
				"import boofcv.alg.distort.ImageDistort;\n" +
				"import boofcv.struct.image."+imageName+";\n" +
				"import boofcv.struct.distort.PixelTransform;\n" +
				"import boofcv.core.image.border.ImageBorder;\n" +
				"import boofcv.core.image.border."+borderType+";\n");
		if( image.isInteger() ) {
			out.print("import boofcv.struct.image.ImageInteger;\n");
		}
		out.print("\n" +
				"\n" +
				"/**\n" +
				" * <p>Implementation of {@link boofcv.alg.distort.ImageDistort}.</p>\n" +
				" *\n" +
				" * <p>\n" +
				" * DO NOT MODIFY: Generated by {@link boofcv.alg.distort.impl.GeneratorImplImageDistort}.\n" +
				" * </p>\n" +
				" *\n" +
				" * @author Peter Abeles\n" +
				" */\n" +
				"@SuppressWarnings({\"UnnecessaryLocalVariable\"})\n");
		if( image.isInteger() ) {
			out.print("public class "+className+"<T extends "+imageName+"> implements ImageDistort<T> {\n");
			imageName = "T";
		} else {
			out.print("public class "+className+" implements ImageDistort<"+imageName+"> {\n");
		}

		out.print("\n" +
				"\t// transform from dst to src image\n" +
				"\tprivate PixelTransform dstToSrc;\n" +
				"\t// sub pixel interpolation\n" +
				"\tprivate InterpolatePixel<"+imageName+"> interp;\n" +
				"\t// handle the image border\n" +
				"\tprivate "+borderType+" border;\n" +
				"\n" +
				"\tpublic "+className+"(PixelTransform dstToSrc, InterpolatePixel<"+imageName+"> interp , ImageBorder<"+borderImageType+"> border ) {\n" +
				"\t\tthis.dstToSrc = dstToSrc;\n" +
				"\t\tthis.interp = interp;\n" +
				"\t\tthis.border = ("+borderType+")border;\n" +
				"\t}\n"+
				"\n" +
				"\t@Override\n" +
				"\tpublic void setModel(PixelTransform dstToSrc) {\n" +
				"\t\tthis.dstToSrc = dstToSrc;\n" +
				"\t}\n\n");
	}

	private void printFunction() {

		String typeCast = image.isInteger() ? "("+image.getDataType()+")" : "";
		String imageName = image.isInteger() ? "T" : image.getImageName();


		out.print("\t@Override\n" +
				"\tpublic void apply( "+imageName+" srcImg , "+imageName+" dstImg ) {\n" +
				"\t\tinterp.setImage(srcImg);\n" +
				"\n" +
				"\t\tfinal float widthF = srcImg.getWidth();\n" +
				"\t\tfinal float heightF = srcImg.getHeight();\n" +
				"\n" +
				"\t\tfor( int y = 0; y < dstImg.height; y++ ) {\n" +
				"\t\t\tint indexDst = dstImg.startIndex + dstImg.stride*y;\n" +
				"\t\t\tfor( int x = 0; x < dstImg.width; x++ , indexDst++ ) {\n" +
				"\t\t\t\tdstToSrc.compute(x,y);\n" +
				"\n" +
				"\t\t\t\tfinal float sx = dstToSrc.distX;\n" +
				"\t\t\t\tfinal float sy = dstToSrc.distY;\n" +
				"\n" +
				"\t\t\t\tif( sx < 0f || sx >= widthF || sy < 0f || sy >= heightF ) {\n" +
				"\t\t\t\t\tdstImg.data[indexDst] = "+typeCast+"border.getOutside((int)sx,(int)sy);\n" +
				"\t\t\t\t} else {\n" +
				"\t\t\t\t\tdstImg.data[indexDst] = "+typeCast+"interp.get(sx,sy);\n" +
				"\t\t\t\t}\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\t}\n\n");
	}

	public static void main( String args[] ) throws FileNotFoundException {
		GeneratorImplImageDistort gen = new GeneratorImplImageDistort();
		gen.generate();
	}
}
