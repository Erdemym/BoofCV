/*
 * Copyright (c) 2011-2012, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.feature.detect.intensity.impl;

import boofcv.misc.CodeGeneratorBase;

import java.io.FileNotFoundException;

/**
 * @author Peter Abeles
 */
public class GenerateImplFastIntensity extends CodeGeneratorBase {

	@Override
	public void generate() throws FileNotFoundException {
		createFile(9);
		createFile(10);
		createFile(11);
		createFile(12);
	}

	public void createFile( int numContinuous ) throws FileNotFoundException {
		className = "ImplFastIntensity"+numContinuous;

		printPreamble();
		printCheck(true);
		printCheck(false);

		out.println("}");
	}

	private void printPreamble() throws FileNotFoundException {
		setOutputFile(className);

		out.print("package boofcv.alg.feature.detect.intensity.impl;\n" +
				"\n" +
				"import boofcv.alg.feature.detect.intensity.FastCornerIntensity;\n" +
				"import boofcv.struct.image.ImageSingleBand;\n" +
				"\n" +
				"/**\n" +
				" * <p>\n" +
				" * Contains logic for detecting fast corners. Pixels are sampled such that they can eliminate the most\n" +
				" * number of possible corners, reducing the number of samples required.\n" +
				" * </p>\n" +
				" *\n" +
				" * <p>\n" +
				" * DO NOT MODIFY. Generated by {@link "+getClass().getSimpleName()+"}.\n" +
				" * </p>\n" +
				" *\n" +
				" * @author Peter Abeles\n" +
				" */\n" +
				"public class "+className+"<T extends ImageSingleBand> extends FastCornerIntensity<T>\n" +
				"{\n" +
				"\n" +
				"\t/**\n" +
				"\t * @param helper Provide the image type specific helper.\n" +
				"\t */\n" +
				"\tpublic "+className+"(FastHelper<T> helper) {\n" +
				"\t\tsuper(helper);\n" +
				"\t}\n\n");
	}

	private void printCheck( boolean isLower ) {
		String type = isLower ? "Lower" : "Upper";
		String tabs = "\t";

		out.print("\t@Override\n" +
				"\tprotected boolean check"+type+"( int index )\n" +
				"\t{\n\n");

		// bit field keeps tracks of which circle index could be the start of a corner
		// value of 1 means it could still be a corner
		handleDecisionPoint(type,tabs,0xFFFFFFFF);

		out.print("\t}\n\n");
	}

	private void handleDecisionPoint( String type , String tabs , int bitfield ) {

	}


}
